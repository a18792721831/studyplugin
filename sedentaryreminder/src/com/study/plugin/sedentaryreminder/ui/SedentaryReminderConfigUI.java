package com.study.plugin.sedentaryreminder.ui;

import com.intellij.openapi.ui.Messages;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.Insets;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import lombok.Getter;

import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

public class SedentaryReminderConfigUI {
    private JSpinner intervalTime;
    private JSpinner restTime;
    private JCheckBox compulsionRest;
    private JCheckBox todaySkipReminder;
    @Getter
    private JPanel rootPanel;

    public SedentaryReminderConfigUI() {
        intervalTime.setValue(25);
        intervalTime.addChangeListener(new JSpinnerChangedListener());
        restTime.setValue(5);
        restTime.addChangeListener(new JSpinnerChangedListener());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(3, 5, new Insets(0, 0, 0, 0), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setText("提醒间隔时间(分钟)：");
        rootPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        rootPanel.add(spacer1, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        rootPanel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        intervalTime = new JSpinner();
        rootPanel.add(intervalTime, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("每次休息时间(分钟)：");
        rootPanel.add(label2, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        restTime = new JSpinner();
        rootPanel.add(restTime, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        compulsionRest = new JCheckBox();
        compulsionRest.setSelected(true);
        compulsionRest.setText("是否强制休息");
        rootPanel.add(compulsionRest, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        todaySkipReminder = new JCheckBox();
        todaySkipReminder.setText("今日是否跳过提醒");
        rootPanel.add(todaySkipReminder, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }

    public Integer getIntevalTime() {
        return Integer.valueOf(String.valueOf(intervalTime.getValue()));
    }

    public void setIntervalTime(Integer intervalTimeValue) {
        intervalTime.setValue(intervalTimeValue);
    }

    public Integer getRestTime() {
        return Integer.valueOf(String.valueOf(restTime.getValue()));
    }

    public void setRestTime(Integer restTimeValue) {
        restTime.setValue(restTimeValue);
    }

    public boolean getCompulsionRest() {
        return compulsionRest.isSelected();
    }

    public void setCompulsionRest(boolean isCompulsionRest) {
        compulsionRest.setSelected(isCompulsionRest);
    }

    public boolean getTodaySkipReminder() {
        return todaySkipReminder.isSelected();
    }

    public void setTodaySkipReminder(boolean isTodaySkipReminder) {
        todaySkipReminder.setSelected(isTodaySkipReminder);
    }

    public static void main(String[] args) {
        JFrame frame = new JFrame("SedentaryreminderConfigUI");
        frame.setContentPane(new SedentaryReminderConfigUI().rootPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private class JSpinnerChangedListener implements ChangeListener {

        @Override
        public void stateChanged(ChangeEvent e) {
            JSpinner jSpinner = (JSpinner) e.getSource();
            Integer value = Integer.valueOf(String.valueOf(jSpinner.getValue()));
            if (value > 60 || value <= 0) {
                Messages.showMessageDialog("时间应该在(0,60]内", "时间设置错误", Messages.getErrorIcon());
                jSpinner.setValue(jSpinner.getPreviousValue());
            }
        }
    }
}
